programming
style
engs
labs
notes
reading
resources
examples
programming
style
coding
style
computer
program
meant
for
two
audiences
the
computer
that
compiles
and
runs
and
the
people
who
must
read
modify
maintain
and
test
think
about
writing
program
the
same
way
you
think
about
writing
paper
structure
organization
word
choice
and
formatting
are
just
important
content
program
that
works
but
has
terrible
style
unreadable
and
therefore
useless
real
world
software
development
teams
use
common
programming
style
guides
for
example
you
are
working
the
linux
kernel
you
would
use
linus
coding
style
you
are
working
gnu
project
you
would
closely
follow
the
instructions
chapter
making
the
best
use
their
gnu
coding
standards
document
other
organizations
might
adopt
other
long
respected
coding
standards
like
the
netbsd
source
code
style
guide
they
might
produce
their
own
guidelines
based
several
others
your
company
will
most
likely
have
one
they
prefer
style
guides
include
things
like
formatting
your
source
code
comment
requirements
how
certain
constructs
should
shouldn
used
variable
naming
conventions
cross
platform
compatibility
requirements
and
more
realize
that
coding
style
can
very
personal
choice
but
the
professional
world
you
will
seldom
have
the
privilege
choosing
your
own
style
style
for
assignments
involving
programming
you
must
follow
these
guidelines
inspired
the
amp
book
and
linus
avoid
placing
multiple
statements
single
line
break
long
statements
more
than
characters
over
multiple
lines
indent
appropriately
emacs
and
other
savvy
text
editors
can
indent
automatically
see
below
use
braces
for
every
nested
block
can
save
you
from
accidental
nesting
bugs
place
the
opening
brace
the
end
the
line
and
for
statements
use
spaces
around
binary
operators
except
struct
and
pointer
references
not
use
spaces
between
unary
operator
and
its
operand
see
below
use
parentheses
liberally
when
helps
make
expression
clear
adding
parentheses
rarely
hurts
and
might
actually
prevent
mistake
avoid
calling
exit
from
anywhere
other
than
main
unwind
back
main
using
error
return
values
and
exit
cleanly
exception
recommend
use
function
called
parse
args
and
often
cleanest
for
that
function
exit
when
there
are
problems
with
command
line
arguments
always
initialize
variables
either
when
they
are
created
soon
thereafter
initialize
pointers
null
target
not
yet
known
use
typedef
designate
abstract
data
types
and
use
name
that
ends
person
car
queue
hashtable
bag
etc
when
using
pointers
use
names
that
are
suggestive
pointers
spacep
linep
endp
etc
declare
function
prototypes
with
type
and
name
formal
parameters
avoid
using
global
variables
they
are
absolutely
necessary
restrict
their
use
single
source
file
using
the
static
keyword
not
use
using
goto
unless
absolutely
necessary
you
must
have
really
good
reason
for
using
goto
very
exceptional
cases
avoid
preprocessor
macros
define
macros
tend
source
difficult
bugs
instead
use
const
for
constants
and
use
real
functions
inline
functions
you
must
don
use
magic
numbers
your
code
use
const
create
named
constant
const
float
use
const
wherever
you
can
indicate
value
that
will
not
change
use
the
bool
type
whenever
function
should
return
boolean
value
variable
should
hold
boolean
flag
avoid
old
conventions
that
use
for
false
and
non
zero
for
true
wrap
calls
malloc
type
specific
helper
functions
see
below
choose
either
camelcase
snake
case
and
consistent
break
large
programs
into
multiple
files
every
file
except
for
that
containing
main
should
have
corresponding
file
that
declares
all
functions
constants
and
global
variables
meant
visible
outside
the
file
break
large
functions
aiming
for
strong
cohesion
and
weak
coupling
always
remember
you
are
writing
for
clarity
and
communication
not
show
how
clever
you
are
how
short
and
dense
you
can
make
your
code
commenting
comment
your
code
you
write
much
easier
write
comments
while
your
intentions
are
fresh
your
mind
than
back
later
and
keep
comments
short
simple
and
the
point
comment
wherever
the
code
not
self
describing
see
the
reading
assignments
use
the
style
commenting
for
one
line
comments
and
the
style
for
multi
line
block
comments
use
four
types
comments
start
file
comments
start
function
comments
paragraph
comments
end
line
comments
use
them
the
following
fashion
start
file
comments
you
should
place
block
comment
the
start
each
file
this
comment
should
include
the
names
programmers
the
date
the
file
was
written
and
high
level
description
the
file
contents
stack
bill
stubblefield
november
this
file
contains
the
definitions
stack
class
includes
functions
list
functions
with
brief
descriptions
needed
start
function
comments
write
header
for
each
function
this
comment
should
describe
the
contract
between
the
caller
and
the
function
describe
what
the
function
does
the
meaning
its
parameters
the
meaning
its
return
value
any
and
assumptions
about
the
responsibilities
the
caller
and
the
function
for
example
function
float
sqrt
float
number
requires
its
argument
positive
document
similarly
specify
any
constraints
the
output
list
all
error
conditions
and
what
the
function
does
with
them
list
any
side
effects
explicit
about
memory
allocation
the
function
returns
pointer
space
from
malloc
who
responsible
for
calling
free
the
function
algorithm
not
obvious
describe
often
good
idea
also
you
borrow
the
algorithm
from
another
source
credit
the
source
and
author
paragraph
comments
often
procedures
can
divided
into
series
steps
such
initialization
reading
data
writing
output
place
small
comment
before
each
such
section
describing
what
does
end
line
comments
place
brief
comment
the
end
those
lines
where
needed
clarify
the
code
don
overdo
but
use
them
call
the
reader
attention
subtleties
the
code
align
the
comments
that
all
the
comments
for
function
begin
the
same
column
although
this
column
can
vary
for
different
functions
spacing
place
space
after
keywords
like
else
for
while
switch
etc
after
commas
function
calls
after
semicolons
for
loop
between
right
parenthesis
and
left
bracket
and
around
binary
operators
except
and
and
remember
that
assignment
binary
operator
usually
not
put
spaces
between
function
name
and
its
parameter
list
array
name
and
its
subscripts
for
example
for
indenting
let
your
text
editor
help
you
auto
indent
your
code
often
trouble
with
auto
indentation
clue
your
own
syntax
mistake
such
forgetting
brackets
when
you
create
open
file
emacs
will
recognize
the
filename
extension
and
switch
mode
you
see
this
mode
the
emacs
status
line
mode
hitting
the
tab
key
while
the
cursor
given
line
indents
the
correct
level
assuming
that
the
preceding
non
blank
line
has
been
indented
correctly
ending
line
with
left
bracket
and
hitting
return
will
automatically
indent
the
next
line
appropriately
also
line
beginning
with
right
bracket
will
indent
the
correct
level
finally
typing
new
line
will
create
comment
and
indent
the
line
code
dynamic
memory
allocation
avoid
sprinking
calls
malloc
and
free
throughout
your
code
instead
think
about
the
kinds
things
you
need
create
and
destroy
and
write
type
specific
wrapper
for
each
such
type
for
example
your
program
manipulates
things
type
struct
listnode
you
would
write
two
functions
struct
listnode
listnode
new
void
listnode
delete
struct
listnode
node
the
first
function
calls
malloc
sizeof
struct
listnode
and
initializes
all
its
contents
perhaps
using
parameters
passed
the
caller
the
second
calls
free
node
both
involve
careful
error
checking
code
see
example
names
there
are
many
advantages
this
approach
the
mainline
code
more
readable
because
clear
what
listnode
new
doing
code
involving
malloc
can
sometimes
tricky
and
you
isolate
that
trickiness
one
spot
and
focus
getting
right
once
some
new
types
might
need
multiple
malloc
calls
our
linked
list
example
names
all
those
malloc
calls
and
corresponding
free
calls
can
the
new
free
functions
the
new
function
acts
like
constructor
object
oriented
languages
and
can
ensure
the
newly
returned
memory
initialized
least
not
random
bytes
you
can
insert
debugging
output
reference
counting
logic
set
debugger
breakpoints
these
new
free
functions
and
immediately
have
that
feature
apply
all
occurrences
your
program
work
with
this
type
program
structure
although
allows
very
flexible
with
where
put
declarations
standard
layout
makes
easier
read
the
code
good
convention
start
file
comments
include
stdio
include
stdlib
global
type
and
constant
definitions
const
float
function
prototypes
void
push
int
item
start
function
comments
int
main
const
int
argc
char
argv
local
const
type
and
variable
declarations
body
code
start
function
comments
void
push
int
item
local
const
type
and
variable
declarations
function
body
although
you
can
declare
variables
anytime
before
they
are
used
sometimes
best
place
all
declarations
the
beginning
the
function
that
way
reader
can
easily
find
them
there
are
times
when
convenient
prudent
otherwise
come
back
this
issue
also
good
idea
break
large
programs
into
multiple
files
for
example
stack
module
may
declared
stack
defined
stack
and
used
main
simplicity
this
single
most
important
thing
you
can
write
good
code
keep
simple
william
occam
said
the
century
not
multiply
entities
without
necessity
simplicity
has
many
aspects
few
these
include
make
all
functions
small
coherent
and
specific
every
function
should
exactly
one
thing
good
rule
thumb
that
you
should
able
describe
what
function
does
single
sentence
generally
functions
occupy
less
than
page
with
most
functions
occupying
lines
use
small
parameter
lists
avoid
extremely
long
parameter
lists
you
find
the
parameters
function
growing
ask
yourself
the
function
trying
too
much
the
function
too
vague
its
intent
avoid
deeply
nested
blocks
structures
such
for
and
while
define
blocks
code
blocks
can
contain
other
blocks
try
not
nest
blocks
too
deeply
any
function
with
more
than
couple
levels
nesting
can
confusing
you
find
yourself
with
deeply
nested
structures
consider
either
simplifying
the
structure
defining
functions
handle
some
the
nested
parts
use
the
simplest
algorithm
that
meets
your
needs
einstein
once
said
things
should
simple
possible
but
simpler
this
good
advice
for
selecting
algorithm
there
are
great
many
extremely
clever
complex
algorithms
computer
science
make
effort
know
them
and
use
the
algorithm
that
meets
your
needs
for
efficiency
not
shun
complex
algorithms
but
not
choose
them
without
reason
consistent
consistency
can
come
many
forms
few
these
include
try
consistent
numbers
and
types
function
parameters
two
functions
have
similar
function
try
give
them
similar
sets
parameters
try
consistent
your
use
loops
and
other
program
constructs
use
consistent
naming
and
commenting
styles
don
clever
samuel
johnson
once
said
may
not
quoting
him
exactly
when
you
find
something
particularly
clever
your
writing
strike
out
offers
many
constructs
such
conditional
expressions
unary
operators
etc
that
make
possible
write
extremely
compact
dense
unreadable
code
use
these
features
but
also
ask
yourself
will
another
programmer
understand
what
mean
here
practice
defensive
programming
important
you
write
programs
defensively
that
you
need
check
the
input
the
program
receives
make
sure
expected
range
correct
datatype
length
strings
etc
and
not
acceptable
provide
appropriate
message
back
the
user
terms
the
program
usage
the
user
should
never
able
cause
your
program
adversely
impact
any
aspect
the
system
running
including
system
files
other
users
files
processes
network
access
make
sure
command
line
arguments
and
function
parameters
have
legal
values
check
the
results
all
calls
standard
libraries
the
operating
system
for
example
check
all
memory
allocations
malloc
detect
out
memory
conditions
check
all
data
obtained
from
users
other
programs
check
limit
conditions
loops
and
arrays
for
example
what
happens
you
try
access
value
that
out
bounds
when
you
detect
error
condition
first
consider
ways
modify
the
code
prevent
the
error
from
happening
the
first
place
that
not
possible
ask
there
way
the
code
can
recover
from
the
error
there
reasonable
way
recovering
print
error
message
and
exit
the
program
short
someone
can
crash
your
program
you
lose
points
whether
this
class
future
job
required
compiler
options
for
all
programming
assignments
this
class
you
must
use
minimum
the
following
gcc
compile
options
gcc
std
wall
pedantic
program
all
programs
must
compile
without
errors
warnings
these
instruct
the
compiler
compile
for
the
language
standard
display
all
possible
warnings
and
issue
warnings
any
non
iso
standard
features
proided
gcc
are
used
respectively
you
will
likely
need
add
other
options
these
for
example
you
use
mathematics
functions
you
need
include
math
your
program
and
add
the
command
line
engs
dartmouth
college
this
version
the
course
based
upon
those
designed
professors
palmer
kotz
zhou
campbell
and
balkcom
deeply
indebted
these
outstanding
educators
stephen
taylor
this
page
was
last
updated
